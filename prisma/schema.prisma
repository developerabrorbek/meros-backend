datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator meros_client {
  provider = "prisma-client-js"
}

enum TranslateType {
  error   @map("error")
  content @map("content")

  @@map("translate_type")
}

enum BannerPriority {
  first  @map("first")
  second @map("second")
  third  @map("third")
  fourth @map("fourth")
  fifth  @map("fifth")
}

enum Status {
  active   @map("active")
  inactive @map("inactive")
}

enum GenderType {
  male   @map("male")
  female @map("female")
}

enum RolesType {
  user        @map("user")
  super_admin @map("super_admin")
  admin       @map("admin")
}

enum OrderStatus {
  completed @map("completed")
  shipped   @map("shippped")
  cancelled @map("cancelled")
}

model Language {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String       @map("code") @db.VarChar(2)
  title      String       @map("title") @db.VarChar(64)
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("language")
}

model Translate {
  id         String        @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  code       String        @map("code") @db.VarChar()
  type       TranslateType @map("type")
  definition Definition[]

  @@id([id])
  @@unique([code])
  @@map("translate")
}

model Definition {
  id          String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  translateId String @map("translate_id") @db.Uuid
  languageId  String @map("language_id") @db.Uuid
  value       String @map("value") @db.VarChar()

  translate Translate @relation(fields: [translateId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language  Language  @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("definition")
}

model Banner {
  id     String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  image  String @db.VarChar()
  status String @map("status")

  @@id([id])
  @@map("banner")
}

model Category {
  id          String     @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name        String     @map("name") @db.Uuid
  image       String     @map("image") @db.VarChar()
  subcategory Category[] @relation("subcategory")
  category    Category?  @relation("subcategory", fields: [parentId], references: [id])
  parentId    String?    @map("parent_id") @db.Uuid
  product     Product[]

  @@id([id])
  @@map("category")
}

model Product {
  id          String   @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  title       String   @map("title") @db.Uuid
  images      String[] @map("images")
  rating      String   @map("rating") @db.VarChar(4)
  count       Int      @map("count") @db.Integer
  description String   @map("description") @db.Uuid
  price       Int      @map("price") @db.Integer
  sale        Int      @map("sale") @db.Integer
  categoryId  String   @map("category_id") @db.Uuid

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders    Order[]

  @@id([id])
  @@map("product")
}

model User {
  id         String       @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  name       String       @map("name") @db.Uuid
  year       String       @map("year") @db.VarChar(4)
  gender     GenderType   @map("gender")
  image      String?       @map("image") @db.VarChar()
  phone      String       @map("phone_number") @db.VarChar()
  email      String       @map("email") @db.VarChar()
  username   String       @map("username") @db.VarChar()
  password   String       @map("password") @db.VarChar()
  role       RolesType    @map("role")
  userDevice UserDevice[]
  orders      Order[]

  @@id([id])
  @@map("user")
}

model UserDevice {
  id           String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  userAgent    String? @map("user_agent") @db.VarChar()
  accessToken  String  @map("access_token") @db.VarChar()
  refreshToken String  @map("refresh_token") @db.VarChar()
  ip           String? @map("ip") @db.VarChar()
  userId       String  @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("user_device")
}

model Order {
  id           String      @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  ordered_time DateTime    @default(now()) @db.Timestamp()
  destination  String      @map("destination") @db.VarChar()
  longitude    String?     @map("longitude") @db.VarChar()
  latitude     String?     @map("latitude") @db.VarChar()
  status       OrderStatus @map("status")
  userId       String      @map("user_id") @db.Uuid
  productId    String      @map("product_id") @db.Uuid

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id])
  @@map("order")
}
